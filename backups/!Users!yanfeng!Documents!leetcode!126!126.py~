import copy 

class Solution(object):
    @profile
    def nextWordsList(self, str):
        ret = []
        for i in range(0, len(str)):
            for j in "abcdefghijklmnopqrstuvwxyz":
                if str[i] != j:
                    ret.append(str[:i]+j+str[i+1:])
        return ret

    @profile
    def isNext(self, str, next, l):
        diff = 0
        while l > 0:
            if str[l-1] != next[l-1]:
                diff += 1
            if diff > 1:
                return False
            l -= 1
        if diff == 1:
            return True
        else:
            return False
    
    @profile
    def findLadders(self, beginWord, endWord, wordlist):
        """
        :type beginWord: str
        :type endWord: str
        :type wordlist: Set[str]
        :rtype: List[List[int]]
        """
        # All words have the same length
        lword = len(beginWord)
        result = []
        pathlist = [[beginWord,],]
        hasMore = True
        while hasMore:
            curlv = []
            candidates = {}
            hasMore = False
            matchEnd = False
            for path in pathlist:
                tail = path[-1]
                if self.isNext(tail, endWord, lword):
                    cpy = copy.copy(path)
                    cpy.append(endWord)
                    result.append(cpy)
                    matchEnd = True
                else:
                    if not matchEnd and not candidates.has_key(tail):
                        #candidates[tail] = [v for v in self.nextWordsList(tail) if v in wordlist]
                        candidates[tail] = list(set(self.nextWordsList(tail)).intersection(set(wordlist)))
            # only match shortest paths
            if matchEnd:
                break
            # if not matched the end, inc depth and continue next loop
            for path in pathlist:
                tail = path[-1]
                for word in candidates[tail]:
                    hasMore = True
                    cpy = copy.copy(path)
                    cpy.append(word)
                    curlv.append(cpy)
            """
            print "depth: "+str(len(pathlist[0]))
            print "count: "+str(len(pathlist))
            print "curlv: "+str(len(curlv))
            print ""
            """
            # delete words in current depth form wordlist
            for tail in candidates:
                for word in candidates[tail]:
                    if word in wordlist:
                        wordlist.remove(word)
            pathlist = curlv
        return result
    
s = Solution()
print s.findLadders("hit", "cog", ["hot","dot","dog","lot","log"])
print s.findLadders("hot", "dog", ["hot", "dog"])
print s.findLadders("hit", "cog", ["hot","cog","dot","dog","hit","lot","log"])
print s.findLadders("hit", "cog", [])
print s.findLadders("a", "b", ["a", "b", "c"])
print s.findLadders("red", "tax", ["ted","tex","red","tax","tad","den","rex","pee"])
import json
f = file("data1.json")
j = json.load(f)
f.close()
import cProfile
print s.findLadders("charge", "comedo", j)
#cProfile.run('print s.findLadders("sand", "acne", j)')
